#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Apr 11 21:43:45 2020

@author: Sweta Kumari
"""
import numpy as np


class BasicCalculus:
    def __init__(self, x, y, size, alpha, significant):
        self.x = x
        self.y = y
        self.alpha = alpha
        self.significant = significant
        self.size = size
        
    def get_a0_a1(self):
        a0 = np.random.random()
        a1 = np.random.random()
        prev_a0 = 0
        prev_a1 = 0
        error = self.get_error(a0, a1)
        while a0 != prev_a0 or a1 != prev_a1 and\
        error != pow(10, self.significant):
            prev_a0 = a0
            prev_a1 = a1
            a0 = self.get_a0(a0, prev_a1)
            a1 = self.get_a1(prev_a0, a1)
            error = self.get_error(a0, a1)
            result = {}
            result["weightage"] = np.array([a0, a1])
            result["error"] = self.get_error(a0, a1)
        return result

    def get_sumof_derivative_a0(self, a_0, a_1):
        return sum(a_0+a_1 * self.x - self.y) / self.size

    def get_sumof_derivative_a1(self, a_0, a_1):
        return sum((a_0+a_1*self.x-self.y)*self.x) / self.size

    def get_a0(self, a0, a1):
        aj = a0 - self.alpha * self.get_sumof_derivative_a0(a0, a1)
        return aj

    def get_a1(self, a0, a1):
        aj = a1 - self.alpha * self.get_sumof_derivative_a1(a0, a1)
        return aj
    
    def get_error(self, a0, a1):
        error_vect = (a0 + a1 * self.x) - self.y
        return sum((error_vect**2))/(2 * self.size)




class LinearRegression:
    
    def __init__(self, normalize = False, alpha = 0.05, significant = 5):
        self.__alpha = alpha
        self.__significant = significant
        self.__normalize = normalize

    def get_alpha(self):
        return self.__alpha
    
    def get_significant(self):
        return self.__significant
    
    def get_normalize(self):
        return self.__normalize

    def fit(self, x, y):
        x_len = len(x)
        y_len = len(y)
        assert(x_len == y_len)
        bm=BasicCalculus(x, y, x_len, self.get_alpha(),self.get_significant())
        if self.get_normalize() == True:
            x = (x-np.mean(x))/np.std()
        result = bm.get_a0_a1()
        return result

"""
x = np.array([1,2,3,4,5,6])
y = np.array([16,25,30,37,44,51])
x = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) 
y = np.array([1, 3, 2, 5, 7, 8, 8, 9, 10, 12]) 
lr = LinearRegression()
print(lr.fit(x,y))
"""

class LogisticsRegression:
    def __init__(self, normalize=False):
        pass

    def fit(x, y):
        pass
        #return {"weightage" :0, "error" :1}:
